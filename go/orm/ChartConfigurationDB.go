// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongng2charts/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ChartConfiguration_sql sql.NullBool
var dummy_ChartConfiguration_time time.Duration
var dummy_ChartConfiguration_sort sort.Float64Slice

// ChartConfigurationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model chartconfigurationAPI
type ChartConfigurationAPI struct {
	gorm.Model

	models.ChartConfiguration

	// encoding of pointers
	ChartConfigurationPointersEnconding
}

// ChartConfigurationPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ChartConfigurationPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// ChartConfigurationDB describes a chartconfiguration in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model chartconfigurationDB
type ChartConfigurationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field chartconfigurationDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field chartconfigurationDB.ChartType {{BasicKind}} (to be completed)
	ChartType_Data sql.NullString

	// Declation for basic field chartconfigurationDB.Width {{BasicKind}} (to be completed)
	Width_Data sql.NullInt64

	// Declation for basic field chartconfigurationDB.Heigth {{BasicKind}} (to be completed)
	Heigth_Data sql.NullInt64
	// encoding of pointers
	ChartConfigurationPointersEnconding
}

// ChartConfigurationDBs arrays chartconfigurationDBs
// swagger:response chartconfigurationDBsResponse
type ChartConfigurationDBs []ChartConfigurationDB

// ChartConfigurationDBResponse provides response
// swagger:response chartconfigurationDBResponse
type ChartConfigurationDBResponse struct {
	ChartConfigurationDB
}

// ChartConfigurationWOP is a ChartConfiguration without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ChartConfigurationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ChartType models.ChartType `xlsx:"2"`

	Width int `xlsx:"3"`

	Heigth int `xlsx:"4"`
	// insertion for WOP pointer fields
}

var ChartConfiguration_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ChartType",
	"Width",
	"Heigth",
}

type BackRepoChartConfigurationStruct struct {
	// stores ChartConfigurationDB according to their gorm ID
	Map_ChartConfigurationDBID_ChartConfigurationDB *map[uint]*ChartConfigurationDB

	// stores ChartConfigurationDB ID according to ChartConfiguration address
	Map_ChartConfigurationPtr_ChartConfigurationDBID *map[*models.ChartConfiguration]uint

	// stores ChartConfiguration according to their gorm ID
	Map_ChartConfigurationDBID_ChartConfigurationPtr *map[uint]*models.ChartConfiguration

	db *gorm.DB
}

func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) GetDB() *gorm.DB {
	return backRepoChartConfiguration.db
}

// GetChartConfigurationDBFromChartConfigurationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) GetChartConfigurationDBFromChartConfigurationPtr(chartconfiguration *models.ChartConfiguration) (chartconfigurationDB *ChartConfigurationDB) {
	id := (*backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID)[chartconfiguration]
	chartconfigurationDB = (*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB)[id]
	return
}

// BackRepoChartConfiguration.Init set up the BackRepo of the ChartConfiguration
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) Init(db *gorm.DB) (Error error) {

	if backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr != nil {
		err := errors.New("In Init, backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr should be nil")
		return err
	}

	if backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB != nil {
		err := errors.New("In Init, backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB should be nil")
		return err
	}

	if backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID != nil {
		err := errors.New("In Init, backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.ChartConfiguration, 0)
	backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr = &tmp

	tmpDB := make(map[uint]*ChartConfigurationDB, 0)
	backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB = &tmpDB

	tmpID := make(map[*models.ChartConfiguration]uint, 0)
	backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID = &tmpID

	backRepoChartConfiguration.db = db
	return
}

// BackRepoChartConfiguration.CommitPhaseOne commits all staged instances of ChartConfiguration to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for chartconfiguration := range stage.ChartConfigurations {
		backRepoChartConfiguration.CommitPhaseOneInstance(chartconfiguration)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, chartconfiguration := range *backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr {
		if _, ok := stage.ChartConfigurations[chartconfiguration]; !ok {
			backRepoChartConfiguration.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoChartConfiguration.CommitDeleteInstance commits deletion of ChartConfiguration to the BackRepo
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) CommitDeleteInstance(id uint) (Error error) {

	chartconfiguration := (*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr)[id]

	// chartconfiguration is not staged anymore, remove chartconfigurationDB
	chartconfigurationDB := (*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB)[id]
	query := backRepoChartConfiguration.db.Unscoped().Delete(&chartconfigurationDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID), chartconfiguration)
	delete((*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr), id)
	delete((*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB), id)

	return
}

// BackRepoChartConfiguration.CommitPhaseOneInstance commits chartconfiguration staged instances of ChartConfiguration to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) CommitPhaseOneInstance(chartconfiguration *models.ChartConfiguration) (Error error) {

	// check if the chartconfiguration is not commited yet
	if _, ok := (*backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID)[chartconfiguration]; ok {
		return
	}

	// initiate chartconfiguration
	var chartconfigurationDB ChartConfigurationDB
	chartconfigurationDB.CopyBasicFieldsFromChartConfiguration(chartconfiguration)

	query := backRepoChartConfiguration.db.Create(&chartconfigurationDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID)[chartconfiguration] = chartconfigurationDB.ID
	(*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr)[chartconfigurationDB.ID] = chartconfiguration
	(*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB)[chartconfigurationDB.ID] = &chartconfigurationDB

	return
}

// BackRepoChartConfiguration.CommitPhaseTwo commits all staged instances of ChartConfiguration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, chartconfiguration := range *backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr {
		backRepoChartConfiguration.CommitPhaseTwoInstance(backRepo, idx, chartconfiguration)
	}

	return
}

// BackRepoChartConfiguration.CommitPhaseTwoInstance commits {{structname }} of models.ChartConfiguration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, chartconfiguration *models.ChartConfiguration) (Error error) {

	// fetch matching chartconfigurationDB
	if chartconfigurationDB, ok := (*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB)[idx]; ok {

		chartconfigurationDB.CopyBasicFieldsFromChartConfiguration(chartconfiguration)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers chartconfiguration.Datasets into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, datasetAssocEnd := range chartconfiguration.Datasets {

			// get the back repo instance at the association end
			datasetAssocEnd_DB :=
				backRepo.BackRepoDataset.GetDatasetDBFromDatasetPtr(datasetAssocEnd)

			// encode reverse pointer in the association end back repo instance
			datasetAssocEnd_DB.ChartConfiguration_DatasetsDBID.Int64 = int64(chartconfigurationDB.ID)
			datasetAssocEnd_DB.ChartConfiguration_DatasetsDBID.Valid = true
			datasetAssocEnd_DB.ChartConfiguration_DatasetsDBID_Index.Int64 = int64(idx)
			datasetAssocEnd_DB.ChartConfiguration_DatasetsDBID_Index.Valid = true
			if q := backRepoChartConfiguration.db.Save(datasetAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers chartconfiguration.Labels into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, labelAssocEnd := range chartconfiguration.Labels {

			// get the back repo instance at the association end
			labelAssocEnd_DB :=
				backRepo.BackRepoLabel.GetLabelDBFromLabelPtr(labelAssocEnd)

			// encode reverse pointer in the association end back repo instance
			labelAssocEnd_DB.ChartConfiguration_LabelsDBID.Int64 = int64(chartconfigurationDB.ID)
			labelAssocEnd_DB.ChartConfiguration_LabelsDBID.Valid = true
			labelAssocEnd_DB.ChartConfiguration_LabelsDBID_Index.Int64 = int64(idx)
			labelAssocEnd_DB.ChartConfiguration_LabelsDBID_Index.Valid = true
			if q := backRepoChartConfiguration.db.Save(labelAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoChartConfiguration.db.Save(&chartconfigurationDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ChartConfiguration intance %s", chartconfiguration.Name))
		return err
	}

	return
}

// BackRepoChartConfiguration.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) CheckoutPhaseOne() (Error error) {

	chartconfigurationDBArray := make([]ChartConfigurationDB, 0)
	query := backRepoChartConfiguration.db.Find(&chartconfigurationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	chartconfigurationInstancesToBeRemovedFromTheStage := make(map[*models.ChartConfiguration]any)
	for key, value := range models.Stage.ChartConfigurations {
		chartconfigurationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, chartconfigurationDB := range chartconfigurationDBArray {
		backRepoChartConfiguration.CheckoutPhaseOneInstance(&chartconfigurationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		chartconfiguration, ok := (*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr)[chartconfigurationDB.ID]
		if ok {
			delete(chartconfigurationInstancesToBeRemovedFromTheStage, chartconfiguration)
		}
	}

	// remove from stage and back repo's 3 maps all chartconfigurations that are not in the checkout
	for chartconfiguration := range chartconfigurationInstancesToBeRemovedFromTheStage {
		chartconfiguration.Unstage()

		// remove instance from the back repo 3 maps
		chartconfigurationID := (*backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID)[chartconfiguration]
		delete((*backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID), chartconfiguration)
		delete((*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB), chartconfigurationID)
		delete((*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr), chartconfigurationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a chartconfigurationDB that has been found in the DB, updates the backRepo and stages the
// models version of the chartconfigurationDB
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) CheckoutPhaseOneInstance(chartconfigurationDB *ChartConfigurationDB) (Error error) {

	chartconfiguration, ok := (*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr)[chartconfigurationDB.ID]
	if !ok {
		chartconfiguration = new(models.ChartConfiguration)

		(*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr)[chartconfigurationDB.ID] = chartconfiguration
		(*backRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID)[chartconfiguration] = chartconfigurationDB.ID

		// append model store with the new element
		chartconfiguration.Name = chartconfigurationDB.Name_Data.String
		chartconfiguration.Stage()
	}
	chartconfigurationDB.CopyBasicFieldsToChartConfiguration(chartconfiguration)

	// preserve pointer to chartconfigurationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ChartConfigurationDBID_ChartConfigurationDB)[chartconfigurationDB hold variable pointers
	chartconfigurationDB_Data := *chartconfigurationDB
	preservedPtrToChartConfiguration := &chartconfigurationDB_Data
	(*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB)[chartconfigurationDB.ID] = preservedPtrToChartConfiguration

	return
}

// BackRepoChartConfiguration.CheckoutPhaseTwo Checkouts all staged instances of ChartConfiguration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, chartconfigurationDB := range *backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB {
		backRepoChartConfiguration.CheckoutPhaseTwoInstance(backRepo, chartconfigurationDB)
	}
	return
}

// BackRepoChartConfiguration.CheckoutPhaseTwoInstance Checkouts staged instances of ChartConfiguration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, chartconfigurationDB *ChartConfigurationDB) (Error error) {

	chartconfiguration := (*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr)[chartconfigurationDB.ID]
	_ = chartconfiguration // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem chartconfiguration.Datasets in the stage from the encode in the back repo
	// It parses all DatasetDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	chartconfiguration.Datasets = chartconfiguration.Datasets[:0]
	// 2. loop all instances in the type in the association end
	for _, datasetDB_AssocEnd := range *backRepo.BackRepoDataset.Map_DatasetDBID_DatasetDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if datasetDB_AssocEnd.ChartConfiguration_DatasetsDBID.Int64 == int64(chartconfigurationDB.ID) {
			// 4. fetch the associated instance in the stage
			dataset_AssocEnd := (*backRepo.BackRepoDataset.Map_DatasetDBID_DatasetPtr)[datasetDB_AssocEnd.ID]
			// 5. append it the association slice
			chartconfiguration.Datasets = append(chartconfiguration.Datasets, dataset_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(chartconfiguration.Datasets, func(i, j int) bool {
		datasetDB_i_ID := (*backRepo.BackRepoDataset.Map_DatasetPtr_DatasetDBID)[chartconfiguration.Datasets[i]]
		datasetDB_j_ID := (*backRepo.BackRepoDataset.Map_DatasetPtr_DatasetDBID)[chartconfiguration.Datasets[j]]

		datasetDB_i := (*backRepo.BackRepoDataset.Map_DatasetDBID_DatasetDB)[datasetDB_i_ID]
		datasetDB_j := (*backRepo.BackRepoDataset.Map_DatasetDBID_DatasetDB)[datasetDB_j_ID]

		return datasetDB_i.ChartConfiguration_DatasetsDBID_Index.Int64 < datasetDB_j.ChartConfiguration_DatasetsDBID_Index.Int64
	})

	// This loop redeem chartconfiguration.Labels in the stage from the encode in the back repo
	// It parses all LabelDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	chartconfiguration.Labels = chartconfiguration.Labels[:0]
	// 2. loop all instances in the type in the association end
	for _, labelDB_AssocEnd := range *backRepo.BackRepoLabel.Map_LabelDBID_LabelDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if labelDB_AssocEnd.ChartConfiguration_LabelsDBID.Int64 == int64(chartconfigurationDB.ID) {
			// 4. fetch the associated instance in the stage
			label_AssocEnd := (*backRepo.BackRepoLabel.Map_LabelDBID_LabelPtr)[labelDB_AssocEnd.ID]
			// 5. append it the association slice
			chartconfiguration.Labels = append(chartconfiguration.Labels, label_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(chartconfiguration.Labels, func(i, j int) bool {
		labelDB_i_ID := (*backRepo.BackRepoLabel.Map_LabelPtr_LabelDBID)[chartconfiguration.Labels[i]]
		labelDB_j_ID := (*backRepo.BackRepoLabel.Map_LabelPtr_LabelDBID)[chartconfiguration.Labels[j]]

		labelDB_i := (*backRepo.BackRepoLabel.Map_LabelDBID_LabelDB)[labelDB_i_ID]
		labelDB_j := (*backRepo.BackRepoLabel.Map_LabelDBID_LabelDB)[labelDB_j_ID]

		return labelDB_i.ChartConfiguration_LabelsDBID_Index.Int64 < labelDB_j.ChartConfiguration_LabelsDBID_Index.Int64
	})

	return
}

// CommitChartConfiguration allows commit of a single chartconfiguration (if already staged)
func (backRepo *BackRepoStruct) CommitChartConfiguration(chartconfiguration *models.ChartConfiguration) {
	backRepo.BackRepoChartConfiguration.CommitPhaseOneInstance(chartconfiguration)
	if id, ok := (*backRepo.BackRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID)[chartconfiguration]; ok {
		backRepo.BackRepoChartConfiguration.CommitPhaseTwoInstance(backRepo, id, chartconfiguration)
	}
}

// CommitChartConfiguration allows checkout of a single chartconfiguration (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutChartConfiguration(chartconfiguration *models.ChartConfiguration) {
	// check if the chartconfiguration is staged
	if _, ok := (*backRepo.BackRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID)[chartconfiguration]; ok {

		if id, ok := (*backRepo.BackRepoChartConfiguration.Map_ChartConfigurationPtr_ChartConfigurationDBID)[chartconfiguration]; ok {
			var chartconfigurationDB ChartConfigurationDB
			chartconfigurationDB.ID = id

			if err := backRepo.BackRepoChartConfiguration.db.First(&chartconfigurationDB, id).Error; err != nil {
				log.Panicln("CheckoutChartConfiguration : Problem with getting object with id:", id)
			}
			backRepo.BackRepoChartConfiguration.CheckoutPhaseOneInstance(&chartconfigurationDB)
			backRepo.BackRepoChartConfiguration.CheckoutPhaseTwoInstance(backRepo, &chartconfigurationDB)
		}
	}
}

// CopyBasicFieldsFromChartConfiguration
func (chartconfigurationDB *ChartConfigurationDB) CopyBasicFieldsFromChartConfiguration(chartconfiguration *models.ChartConfiguration) {
	// insertion point for fields commit

	chartconfigurationDB.Name_Data.String = chartconfiguration.Name
	chartconfigurationDB.Name_Data.Valid = true

	chartconfigurationDB.ChartType_Data.String = chartconfiguration.ChartType.ToString()
	chartconfigurationDB.ChartType_Data.Valid = true

	chartconfigurationDB.Width_Data.Int64 = int64(chartconfiguration.Width)
	chartconfigurationDB.Width_Data.Valid = true

	chartconfigurationDB.Heigth_Data.Int64 = int64(chartconfiguration.Heigth)
	chartconfigurationDB.Heigth_Data.Valid = true
}

// CopyBasicFieldsFromChartConfigurationWOP
func (chartconfigurationDB *ChartConfigurationDB) CopyBasicFieldsFromChartConfigurationWOP(chartconfiguration *ChartConfigurationWOP) {
	// insertion point for fields commit

	chartconfigurationDB.Name_Data.String = chartconfiguration.Name
	chartconfigurationDB.Name_Data.Valid = true

	chartconfigurationDB.ChartType_Data.String = chartconfiguration.ChartType.ToString()
	chartconfigurationDB.ChartType_Data.Valid = true

	chartconfigurationDB.Width_Data.Int64 = int64(chartconfiguration.Width)
	chartconfigurationDB.Width_Data.Valid = true

	chartconfigurationDB.Heigth_Data.Int64 = int64(chartconfiguration.Heigth)
	chartconfigurationDB.Heigth_Data.Valid = true
}

// CopyBasicFieldsToChartConfiguration
func (chartconfigurationDB *ChartConfigurationDB) CopyBasicFieldsToChartConfiguration(chartconfiguration *models.ChartConfiguration) {
	// insertion point for checkout of basic fields (back repo to stage)
	chartconfiguration.Name = chartconfigurationDB.Name_Data.String
	chartconfiguration.ChartType.FromString(chartconfigurationDB.ChartType_Data.String)
	chartconfiguration.Width = int(chartconfigurationDB.Width_Data.Int64)
	chartconfiguration.Heigth = int(chartconfigurationDB.Heigth_Data.Int64)
}

// CopyBasicFieldsToChartConfigurationWOP
func (chartconfigurationDB *ChartConfigurationDB) CopyBasicFieldsToChartConfigurationWOP(chartconfiguration *ChartConfigurationWOP) {
	chartconfiguration.ID = int(chartconfigurationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	chartconfiguration.Name = chartconfigurationDB.Name_Data.String
	chartconfiguration.ChartType.FromString(chartconfigurationDB.ChartType_Data.String)
	chartconfiguration.Width = int(chartconfigurationDB.Width_Data.Int64)
	chartconfiguration.Heigth = int(chartconfigurationDB.Heigth_Data.Int64)
}

// Backup generates a json file from a slice of all ChartConfigurationDB instances in the backrepo
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ChartConfigurationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ChartConfigurationDB, 0)
	for _, chartconfigurationDB := range *backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB {
		forBackup = append(forBackup, chartconfigurationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json ChartConfiguration ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json ChartConfiguration file", err.Error())
	}
}

// Backup generates a json file from a slice of all ChartConfigurationDB instances in the backrepo
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ChartConfigurationDB, 0)
	for _, chartconfigurationDB := range *backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB {
		forBackup = append(forBackup, chartconfigurationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ChartConfiguration")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ChartConfiguration_Fields, -1)
	for _, chartconfigurationDB := range forBackup {

		var chartconfigurationWOP ChartConfigurationWOP
		chartconfigurationDB.CopyBasicFieldsToChartConfigurationWOP(&chartconfigurationWOP)

		row := sh.AddRow()
		row.WriteStruct(&chartconfigurationWOP, -1)
	}
}

// RestoreXL from the "ChartConfiguration" sheet all ChartConfigurationDB instances
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoChartConfigurationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ChartConfiguration"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoChartConfiguration.rowVisitorChartConfiguration)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) rowVisitorChartConfiguration(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var chartconfigurationWOP ChartConfigurationWOP
		row.ReadStruct(&chartconfigurationWOP)

		// add the unmarshalled struct to the stage
		chartconfigurationDB := new(ChartConfigurationDB)
		chartconfigurationDB.CopyBasicFieldsFromChartConfigurationWOP(&chartconfigurationWOP)

		chartconfigurationDB_ID_atBackupTime := chartconfigurationDB.ID
		chartconfigurationDB.ID = 0
		query := backRepoChartConfiguration.db.Create(chartconfigurationDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB)[chartconfigurationDB.ID] = chartconfigurationDB
		BackRepoChartConfigurationid_atBckpTime_newID[chartconfigurationDB_ID_atBackupTime] = chartconfigurationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ChartConfigurationDB.json" in dirPath that stores an array
// of ChartConfigurationDB and stores it in the database
// the map BackRepoChartConfigurationid_atBckpTime_newID is updated accordingly
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoChartConfigurationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ChartConfigurationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json ChartConfiguration file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ChartConfigurationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ChartConfigurationDBID_ChartConfigurationDB
	for _, chartconfigurationDB := range forRestore {

		chartconfigurationDB_ID_atBackupTime := chartconfigurationDB.ID
		chartconfigurationDB.ID = 0
		query := backRepoChartConfiguration.db.Create(chartconfigurationDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB)[chartconfigurationDB.ID] = chartconfigurationDB
		BackRepoChartConfigurationid_atBckpTime_newID[chartconfigurationDB_ID_atBackupTime] = chartconfigurationDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json ChartConfiguration file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ChartConfiguration>id_atBckpTime_newID
// to compute new index
func (backRepoChartConfiguration *BackRepoChartConfigurationStruct) RestorePhaseTwo() {

	for _, chartconfigurationDB := range *backRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationDB {

		// next line of code is to avert unused variable compilation error
		_ = chartconfigurationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoChartConfiguration.db.Model(chartconfigurationDB).Updates(*chartconfigurationDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoChartConfigurationid_atBckpTime_newID map[uint]uint
