// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongng2charts/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DataPoint_sql sql.NullBool
var dummy_DataPoint_time time.Duration
var dummy_DataPoint_sort sort.Float64Slice

// DataPointAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model datapointAPI
type DataPointAPI struct {
	gorm.Model

	models.DataPoint

	// encoding of pointers
	DataPointPointersEnconding
}

// DataPointPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DataPointPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field Dataset{}.DataPoints []*DataPoint
	Dataset_DataPointsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Dataset_DataPointsDBID_Index sql.NullInt64
}

// DataPointDB describes a datapoint in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model datapointDB
type DataPointDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field datapointDB.Name
	Name_Data sql.NullString

	// Declation for basic field datapointDB.Value
	Value_Data sql.NullFloat64
	// encoding of pointers
	DataPointPointersEnconding
}

// DataPointDBs arrays datapointDBs
// swagger:response datapointDBsResponse
type DataPointDBs []DataPointDB

// DataPointDBResponse provides response
// swagger:response datapointDBResponse
type DataPointDBResponse struct {
	DataPointDB
}

// DataPointWOP is a DataPoint without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DataPointWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value float64 `xlsx:"2"`
	// insertion for WOP pointer fields
}

var DataPoint_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoDataPointStruct struct {
	// stores DataPointDB according to their gorm ID
	Map_DataPointDBID_DataPointDB *map[uint]*DataPointDB

	// stores DataPointDB ID according to DataPoint address
	Map_DataPointPtr_DataPointDBID *map[*models.DataPoint]uint

	// stores DataPoint according to their gorm ID
	Map_DataPointDBID_DataPointPtr *map[uint]*models.DataPoint

	db *gorm.DB
}

func (backRepoDataPoint *BackRepoDataPointStruct) GetDB() *gorm.DB {
	return backRepoDataPoint.db
}

// GetDataPointDBFromDataPointPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDataPoint *BackRepoDataPointStruct) GetDataPointDBFromDataPointPtr(datapoint *models.DataPoint) (datapointDB *DataPointDB) {
	id := (*backRepoDataPoint.Map_DataPointPtr_DataPointDBID)[datapoint]
	datapointDB = (*backRepoDataPoint.Map_DataPointDBID_DataPointDB)[id]
	return
}

// BackRepoDataPoint.Init set up the BackRepo of the DataPoint
func (backRepoDataPoint *BackRepoDataPointStruct) Init(db *gorm.DB) (Error error) {

	if backRepoDataPoint.Map_DataPointDBID_DataPointPtr != nil {
		err := errors.New("In Init, backRepoDataPoint.Map_DataPointDBID_DataPointPtr should be nil")
		return err
	}

	if backRepoDataPoint.Map_DataPointDBID_DataPointDB != nil {
		err := errors.New("In Init, backRepoDataPoint.Map_DataPointDBID_DataPointDB should be nil")
		return err
	}

	if backRepoDataPoint.Map_DataPointPtr_DataPointDBID != nil {
		err := errors.New("In Init, backRepoDataPoint.Map_DataPointPtr_DataPointDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.DataPoint, 0)
	backRepoDataPoint.Map_DataPointDBID_DataPointPtr = &tmp

	tmpDB := make(map[uint]*DataPointDB, 0)
	backRepoDataPoint.Map_DataPointDBID_DataPointDB = &tmpDB

	tmpID := make(map[*models.DataPoint]uint, 0)
	backRepoDataPoint.Map_DataPointPtr_DataPointDBID = &tmpID

	backRepoDataPoint.db = db
	return
}

// BackRepoDataPoint.CommitPhaseOne commits all staged instances of DataPoint to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDataPoint *BackRepoDataPointStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for datapoint := range stage.DataPoints {
		backRepoDataPoint.CommitPhaseOneInstance(datapoint)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, datapoint := range *backRepoDataPoint.Map_DataPointDBID_DataPointPtr {
		if _, ok := stage.DataPoints[datapoint]; !ok {
			backRepoDataPoint.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDataPoint.CommitDeleteInstance commits deletion of DataPoint to the BackRepo
func (backRepoDataPoint *BackRepoDataPointStruct) CommitDeleteInstance(id uint) (Error error) {

	datapoint := (*backRepoDataPoint.Map_DataPointDBID_DataPointPtr)[id]

	// datapoint is not staged anymore, remove datapointDB
	datapointDB := (*backRepoDataPoint.Map_DataPointDBID_DataPointDB)[id]
	query := backRepoDataPoint.db.Unscoped().Delete(&datapointDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoDataPoint.Map_DataPointPtr_DataPointDBID), datapoint)
	delete((*backRepoDataPoint.Map_DataPointDBID_DataPointPtr), id)
	delete((*backRepoDataPoint.Map_DataPointDBID_DataPointDB), id)

	return
}

// BackRepoDataPoint.CommitPhaseOneInstance commits datapoint staged instances of DataPoint to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDataPoint *BackRepoDataPointStruct) CommitPhaseOneInstance(datapoint *models.DataPoint) (Error error) {

	// check if the datapoint is not commited yet
	if _, ok := (*backRepoDataPoint.Map_DataPointPtr_DataPointDBID)[datapoint]; ok {
		return
	}

	// initiate datapoint
	var datapointDB DataPointDB
	datapointDB.CopyBasicFieldsFromDataPoint(datapoint)

	query := backRepoDataPoint.db.Create(&datapointDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoDataPoint.Map_DataPointPtr_DataPointDBID)[datapoint] = datapointDB.ID
	(*backRepoDataPoint.Map_DataPointDBID_DataPointPtr)[datapointDB.ID] = datapoint
	(*backRepoDataPoint.Map_DataPointDBID_DataPointDB)[datapointDB.ID] = &datapointDB

	return
}

// BackRepoDataPoint.CommitPhaseTwo commits all staged instances of DataPoint to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDataPoint *BackRepoDataPointStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, datapoint := range *backRepoDataPoint.Map_DataPointDBID_DataPointPtr {
		backRepoDataPoint.CommitPhaseTwoInstance(backRepo, idx, datapoint)
	}

	return
}

// BackRepoDataPoint.CommitPhaseTwoInstance commits {{structname }} of models.DataPoint to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDataPoint *BackRepoDataPointStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, datapoint *models.DataPoint) (Error error) {

	// fetch matching datapointDB
	if datapointDB, ok := (*backRepoDataPoint.Map_DataPointDBID_DataPointDB)[idx]; ok {

		datapointDB.CopyBasicFieldsFromDataPoint(datapoint)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDataPoint.db.Save(&datapointDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DataPoint intance %s", datapoint.Name))
		return err
	}

	return
}

// BackRepoDataPoint.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoDataPoint *BackRepoDataPointStruct) CheckoutPhaseOne() (Error error) {

	datapointDBArray := make([]DataPointDB, 0)
	query := backRepoDataPoint.db.Find(&datapointDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	datapointInstancesToBeRemovedFromTheStage := make(map[*models.DataPoint]any)
	for key, value := range models.Stage.DataPoints {
		datapointInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, datapointDB := range datapointDBArray {
		backRepoDataPoint.CheckoutPhaseOneInstance(&datapointDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		datapoint, ok := (*backRepoDataPoint.Map_DataPointDBID_DataPointPtr)[datapointDB.ID]
		if ok {
			delete(datapointInstancesToBeRemovedFromTheStage, datapoint)
		}
	}

	// remove from stage and back repo's 3 maps all datapoints that are not in the checkout
	for datapoint := range datapointInstancesToBeRemovedFromTheStage {
		datapoint.Unstage()

		// remove instance from the back repo 3 maps
		datapointID := (*backRepoDataPoint.Map_DataPointPtr_DataPointDBID)[datapoint]
		delete((*backRepoDataPoint.Map_DataPointPtr_DataPointDBID), datapoint)
		delete((*backRepoDataPoint.Map_DataPointDBID_DataPointDB), datapointID)
		delete((*backRepoDataPoint.Map_DataPointDBID_DataPointPtr), datapointID)
	}

	return
}

// CheckoutPhaseOneInstance takes a datapointDB that has been found in the DB, updates the backRepo and stages the
// models version of the datapointDB
func (backRepoDataPoint *BackRepoDataPointStruct) CheckoutPhaseOneInstance(datapointDB *DataPointDB) (Error error) {

	datapoint, ok := (*backRepoDataPoint.Map_DataPointDBID_DataPointPtr)[datapointDB.ID]
	if !ok {
		datapoint = new(models.DataPoint)

		(*backRepoDataPoint.Map_DataPointDBID_DataPointPtr)[datapointDB.ID] = datapoint
		(*backRepoDataPoint.Map_DataPointPtr_DataPointDBID)[datapoint] = datapointDB.ID

		// append model store with the new element
		datapoint.Name = datapointDB.Name_Data.String
		datapoint.Stage()
	}
	datapointDB.CopyBasicFieldsToDataPoint(datapoint)

	// preserve pointer to datapointDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DataPointDBID_DataPointDB)[datapointDB hold variable pointers
	datapointDB_Data := *datapointDB
	preservedPtrToDataPoint := &datapointDB_Data
	(*backRepoDataPoint.Map_DataPointDBID_DataPointDB)[datapointDB.ID] = preservedPtrToDataPoint

	return
}

// BackRepoDataPoint.CheckoutPhaseTwo Checkouts all staged instances of DataPoint to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDataPoint *BackRepoDataPointStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, datapointDB := range *backRepoDataPoint.Map_DataPointDBID_DataPointDB {
		backRepoDataPoint.CheckoutPhaseTwoInstance(backRepo, datapointDB)
	}
	return
}

// BackRepoDataPoint.CheckoutPhaseTwoInstance Checkouts staged instances of DataPoint to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDataPoint *BackRepoDataPointStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, datapointDB *DataPointDB) (Error error) {

	datapoint := (*backRepoDataPoint.Map_DataPointDBID_DataPointPtr)[datapointDB.ID]
	_ = datapoint // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitDataPoint allows commit of a single datapoint (if already staged)
func (backRepo *BackRepoStruct) CommitDataPoint(datapoint *models.DataPoint) {
	backRepo.BackRepoDataPoint.CommitPhaseOneInstance(datapoint)
	if id, ok := (*backRepo.BackRepoDataPoint.Map_DataPointPtr_DataPointDBID)[datapoint]; ok {
		backRepo.BackRepoDataPoint.CommitPhaseTwoInstance(backRepo, id, datapoint)
	}
}

// CommitDataPoint allows checkout of a single datapoint (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDataPoint(datapoint *models.DataPoint) {
	// check if the datapoint is staged
	if _, ok := (*backRepo.BackRepoDataPoint.Map_DataPointPtr_DataPointDBID)[datapoint]; ok {

		if id, ok := (*backRepo.BackRepoDataPoint.Map_DataPointPtr_DataPointDBID)[datapoint]; ok {
			var datapointDB DataPointDB
			datapointDB.ID = id

			if err := backRepo.BackRepoDataPoint.db.First(&datapointDB, id).Error; err != nil {
				log.Panicln("CheckoutDataPoint : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDataPoint.CheckoutPhaseOneInstance(&datapointDB)
			backRepo.BackRepoDataPoint.CheckoutPhaseTwoInstance(backRepo, &datapointDB)
		}
	}
}

// CopyBasicFieldsFromDataPoint
func (datapointDB *DataPointDB) CopyBasicFieldsFromDataPoint(datapoint *models.DataPoint) {
	// insertion point for fields commit

	datapointDB.Name_Data.String = datapoint.Name
	datapointDB.Name_Data.Valid = true

	datapointDB.Value_Data.Float64 = datapoint.Value
	datapointDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromDataPointWOP
func (datapointDB *DataPointDB) CopyBasicFieldsFromDataPointWOP(datapoint *DataPointWOP) {
	// insertion point for fields commit

	datapointDB.Name_Data.String = datapoint.Name
	datapointDB.Name_Data.Valid = true

	datapointDB.Value_Data.Float64 = datapoint.Value
	datapointDB.Value_Data.Valid = true
}

// CopyBasicFieldsToDataPoint
func (datapointDB *DataPointDB) CopyBasicFieldsToDataPoint(datapoint *models.DataPoint) {
	// insertion point for checkout of basic fields (back repo to stage)
	datapoint.Name = datapointDB.Name_Data.String
	datapoint.Value = datapointDB.Value_Data.Float64
}

// CopyBasicFieldsToDataPointWOP
func (datapointDB *DataPointDB) CopyBasicFieldsToDataPointWOP(datapoint *DataPointWOP) {
	datapoint.ID = int(datapointDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	datapoint.Name = datapointDB.Name_Data.String
	datapoint.Value = datapointDB.Value_Data.Float64
}

// Backup generates a json file from a slice of all DataPointDB instances in the backrepo
func (backRepoDataPoint *BackRepoDataPointStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DataPointDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DataPointDB, 0)
	for _, datapointDB := range *backRepoDataPoint.Map_DataPointDBID_DataPointDB {
		forBackup = append(forBackup, datapointDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json DataPoint ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json DataPoint file", err.Error())
	}
}

// Backup generates a json file from a slice of all DataPointDB instances in the backrepo
func (backRepoDataPoint *BackRepoDataPointStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DataPointDB, 0)
	for _, datapointDB := range *backRepoDataPoint.Map_DataPointDBID_DataPointDB {
		forBackup = append(forBackup, datapointDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DataPoint")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DataPoint_Fields, -1)
	for _, datapointDB := range forBackup {

		var datapointWOP DataPointWOP
		datapointDB.CopyBasicFieldsToDataPointWOP(&datapointWOP)

		row := sh.AddRow()
		row.WriteStruct(&datapointWOP, -1)
	}
}

// RestoreXL from the "DataPoint" sheet all DataPointDB instances
func (backRepoDataPoint *BackRepoDataPointStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDataPointid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DataPoint"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDataPoint.rowVisitorDataPoint)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoDataPoint *BackRepoDataPointStruct) rowVisitorDataPoint(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var datapointWOP DataPointWOP
		row.ReadStruct(&datapointWOP)

		// add the unmarshalled struct to the stage
		datapointDB := new(DataPointDB)
		datapointDB.CopyBasicFieldsFromDataPointWOP(&datapointWOP)

		datapointDB_ID_atBackupTime := datapointDB.ID
		datapointDB.ID = 0
		query := backRepoDataPoint.db.Create(datapointDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoDataPoint.Map_DataPointDBID_DataPointDB)[datapointDB.ID] = datapointDB
		BackRepoDataPointid_atBckpTime_newID[datapointDB_ID_atBackupTime] = datapointDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DataPointDB.json" in dirPath that stores an array
// of DataPointDB and stores it in the database
// the map BackRepoDataPointid_atBckpTime_newID is updated accordingly
func (backRepoDataPoint *BackRepoDataPointStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDataPointid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DataPointDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json DataPoint file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DataPointDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DataPointDBID_DataPointDB
	for _, datapointDB := range forRestore {

		datapointDB_ID_atBackupTime := datapointDB.ID
		datapointDB.ID = 0
		query := backRepoDataPoint.db.Create(datapointDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoDataPoint.Map_DataPointDBID_DataPointDB)[datapointDB.ID] = datapointDB
		BackRepoDataPointid_atBckpTime_newID[datapointDB_ID_atBackupTime] = datapointDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json DataPoint file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DataPoint>id_atBckpTime_newID
// to compute new index
func (backRepoDataPoint *BackRepoDataPointStruct) RestorePhaseTwo() {

	for _, datapointDB := range *backRepoDataPoint.Map_DataPointDBID_DataPointDB {

		// next line of code is to avert unused variable compilation error
		_ = datapointDB

		// insertion point for reindexing pointers encoding
		// This reindex datapoint.DataPoints
		if datapointDB.Dataset_DataPointsDBID.Int64 != 0 {
			datapointDB.Dataset_DataPointsDBID.Int64 =
				int64(BackRepoDatasetid_atBckpTime_newID[uint(datapointDB.Dataset_DataPointsDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoDataPoint.db.Model(datapointDB).Updates(*datapointDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDataPointid_atBckpTime_newID map[uint]uint
