// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongng2charts/go/models"
	"github.com/fullstack-lang/gongng2charts/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __ChartConfiguration__dummysDeclaration__ models.ChartConfiguration
var __ChartConfiguration_time__dummyDeclaration time.Duration

// An ChartConfigurationID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getChartConfiguration updateChartConfiguration deleteChartConfiguration
type ChartConfigurationID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ChartConfigurationInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postChartConfiguration updateChartConfiguration
type ChartConfigurationInput struct {
	// The ChartConfiguration to submit or modify
	// in: body
	ChartConfiguration *orm.ChartConfigurationAPI
}

// GetChartConfigurations
//
// swagger:route GET /chartconfigurations chartconfigurations getChartConfigurations
//
// # Get all chartconfigurations
//
// Responses:
// default: genericError
//
//	200: chartconfigurationDBResponse
func GetChartConfigurations(c *gin.Context) {
	db := orm.BackRepo.BackRepoChartConfiguration.GetDB()

	// source slice
	var chartconfigurationDBs []orm.ChartConfigurationDB
	query := db.Find(&chartconfigurationDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	chartconfigurationAPIs := make([]orm.ChartConfigurationAPI, 0)

	// for each chartconfiguration, update fields from the database nullable fields
	for idx := range chartconfigurationDBs {
		chartconfigurationDB := &chartconfigurationDBs[idx]
		_ = chartconfigurationDB
		var chartconfigurationAPI orm.ChartConfigurationAPI

		// insertion point for updating fields
		chartconfigurationAPI.ID = chartconfigurationDB.ID
		chartconfigurationDB.CopyBasicFieldsToChartConfiguration(&chartconfigurationAPI.ChartConfiguration)
		chartconfigurationAPI.ChartConfigurationPointersEnconding = chartconfigurationDB.ChartConfigurationPointersEnconding
		chartconfigurationAPIs = append(chartconfigurationAPIs, chartconfigurationAPI)
	}

	c.JSON(http.StatusOK, chartconfigurationAPIs)
}

// PostChartConfiguration
//
// swagger:route POST /chartconfigurations chartconfigurations postChartConfiguration
//
// Creates a chartconfiguration
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostChartConfiguration(c *gin.Context) {
	db := orm.BackRepo.BackRepoChartConfiguration.GetDB()

	// Validate input
	var input orm.ChartConfigurationAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create chartconfiguration
	chartconfigurationDB := orm.ChartConfigurationDB{}
	chartconfigurationDB.ChartConfigurationPointersEnconding = input.ChartConfigurationPointersEnconding
	chartconfigurationDB.CopyBasicFieldsFromChartConfiguration(&input.ChartConfiguration)

	query := db.Create(&chartconfigurationDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoChartConfiguration.CheckoutPhaseOneInstance(&chartconfigurationDB)
	chartconfiguration := (*orm.BackRepo.BackRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr)[chartconfigurationDB.ID]

	if chartconfiguration != nil {
		models.AfterCreateFromFront(&models.Stage, chartconfiguration)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, chartconfigurationDB)
}

// GetChartConfiguration
//
// swagger:route GET /chartconfigurations/{ID} chartconfigurations getChartConfiguration
//
// Gets the details for a chartconfiguration.
//
// Responses:
// default: genericError
//
//	200: chartconfigurationDBResponse
func GetChartConfiguration(c *gin.Context) {
	db := orm.BackRepo.BackRepoChartConfiguration.GetDB()

	// Get chartconfigurationDB in DB
	var chartconfigurationDB orm.ChartConfigurationDB
	if err := db.First(&chartconfigurationDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var chartconfigurationAPI orm.ChartConfigurationAPI
	chartconfigurationAPI.ID = chartconfigurationDB.ID
	chartconfigurationAPI.ChartConfigurationPointersEnconding = chartconfigurationDB.ChartConfigurationPointersEnconding
	chartconfigurationDB.CopyBasicFieldsToChartConfiguration(&chartconfigurationAPI.ChartConfiguration)

	c.JSON(http.StatusOK, chartconfigurationAPI)
}

// UpdateChartConfiguration
//
// swagger:route PATCH /chartconfigurations/{ID} chartconfigurations updateChartConfiguration
//
// # Update a chartconfiguration
//
// Responses:
// default: genericError
//
//	200: chartconfigurationDBResponse
func UpdateChartConfiguration(c *gin.Context) {
	db := orm.BackRepo.BackRepoChartConfiguration.GetDB()

	// Get model if exist
	var chartconfigurationDB orm.ChartConfigurationDB

	// fetch the chartconfiguration
	query := db.First(&chartconfigurationDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ChartConfigurationAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	chartconfigurationDB.CopyBasicFieldsFromChartConfiguration(&input.ChartConfiguration)
	chartconfigurationDB.ChartConfigurationPointersEnconding = input.ChartConfigurationPointersEnconding

	query = db.Model(&chartconfigurationDB).Updates(chartconfigurationDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	chartconfigurationNew := new(models.ChartConfiguration)
	chartconfigurationDB.CopyBasicFieldsToChartConfiguration(chartconfigurationNew)

	// get stage instance from DB instance, and call callback function
	chartconfigurationOld := (*orm.BackRepo.BackRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr)[chartconfigurationDB.ID]
	if chartconfigurationOld != nil {
		models.AfterUpdateFromFront(&models.Stage, chartconfigurationOld, chartconfigurationNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the chartconfigurationDB
	c.JSON(http.StatusOK, chartconfigurationDB)
}

// DeleteChartConfiguration
//
// swagger:route DELETE /chartconfigurations/{ID} chartconfigurations deleteChartConfiguration
//
// # Delete a chartconfiguration
//
// default: genericError
//
//	200: chartconfigurationDBResponse
func DeleteChartConfiguration(c *gin.Context) {
	db := orm.BackRepo.BackRepoChartConfiguration.GetDB()

	// Get model if exist
	var chartconfigurationDB orm.ChartConfigurationDB
	if err := db.First(&chartconfigurationDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&chartconfigurationDB)

	// get an instance (not staged) from DB instance, and call callback function
	chartconfigurationDeleted := new(models.ChartConfiguration)
	chartconfigurationDB.CopyBasicFieldsToChartConfiguration(chartconfigurationDeleted)

	// get stage instance from DB instance, and call callback function
	chartconfigurationStaged := (*orm.BackRepo.BackRepoChartConfiguration.Map_ChartConfigurationDBID_ChartConfigurationPtr)[chartconfigurationDB.ID]
	if chartconfigurationStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, chartconfigurationStaged, chartconfigurationDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
