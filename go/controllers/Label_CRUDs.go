// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongng2charts/go/models"
	"github.com/fullstack-lang/gongng2charts/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Label__dummysDeclaration__ models.Label
var __Label_time__dummyDeclaration time.Duration

// An LabelID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getLabel updateLabel deleteLabel
type LabelID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// LabelInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postLabel updateLabel
type LabelInput struct {
	// The Label to submit or modify
	// in: body
	Label *orm.LabelAPI
}

// GetLabels
//
// swagger:route GET /labels labels getLabels
//
// # Get all labels
//
// Responses:
// default: genericError
//
//	200: labelDBResponse
func GetLabels(c *gin.Context) {
	db := orm.BackRepo.BackRepoLabel.GetDB()

	// source slice
	var labelDBs []orm.LabelDB
	query := db.Find(&labelDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	labelAPIs := make([]orm.LabelAPI, 0)

	// for each label, update fields from the database nullable fields
	for idx := range labelDBs {
		labelDB := &labelDBs[idx]
		_ = labelDB
		var labelAPI orm.LabelAPI

		// insertion point for updating fields
		labelAPI.ID = labelDB.ID
		labelDB.CopyBasicFieldsToLabel(&labelAPI.Label)
		labelAPI.LabelPointersEnconding = labelDB.LabelPointersEnconding
		labelAPIs = append(labelAPIs, labelAPI)
	}

	c.JSON(http.StatusOK, labelAPIs)
}

// PostLabel
//
// swagger:route POST /labels labels postLabel
//
// Creates a label
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostLabel(c *gin.Context) {
	db := orm.BackRepo.BackRepoLabel.GetDB()

	// Validate input
	var input orm.LabelAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create label
	labelDB := orm.LabelDB{}
	labelDB.LabelPointersEnconding = input.LabelPointersEnconding
	labelDB.CopyBasicFieldsFromLabel(&input.Label)

	query := db.Create(&labelDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoLabel.CheckoutPhaseOneInstance(&labelDB)
	label := (*orm.BackRepo.BackRepoLabel.Map_LabelDBID_LabelPtr)[labelDB.ID]

	if label != nil {
		models.AfterCreateFromFront(&models.Stage, label)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, labelDB)
}

// GetLabel
//
// swagger:route GET /labels/{ID} labels getLabel
//
// Gets the details for a label.
//
// Responses:
// default: genericError
//
//	200: labelDBResponse
func GetLabel(c *gin.Context) {
	db := orm.BackRepo.BackRepoLabel.GetDB()

	// Get labelDB in DB
	var labelDB orm.LabelDB
	if err := db.First(&labelDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var labelAPI orm.LabelAPI
	labelAPI.ID = labelDB.ID
	labelAPI.LabelPointersEnconding = labelDB.LabelPointersEnconding
	labelDB.CopyBasicFieldsToLabel(&labelAPI.Label)

	c.JSON(http.StatusOK, labelAPI)
}

// UpdateLabel
//
// swagger:route PATCH /labels/{ID} labels updateLabel
//
// # Update a label
//
// Responses:
// default: genericError
//
//	200: labelDBResponse
func UpdateLabel(c *gin.Context) {
	db := orm.BackRepo.BackRepoLabel.GetDB()

	// Get model if exist
	var labelDB orm.LabelDB

	// fetch the label
	query := db.First(&labelDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.LabelAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	labelDB.CopyBasicFieldsFromLabel(&input.Label)
	labelDB.LabelPointersEnconding = input.LabelPointersEnconding

	query = db.Model(&labelDB).Updates(labelDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	labelNew := new(models.Label)
	labelDB.CopyBasicFieldsToLabel(labelNew)

	// get stage instance from DB instance, and call callback function
	labelOld := (*orm.BackRepo.BackRepoLabel.Map_LabelDBID_LabelPtr)[labelDB.ID]
	if labelOld != nil {
		models.AfterUpdateFromFront(&models.Stage, labelOld, labelNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the labelDB
	c.JSON(http.StatusOK, labelDB)
}

// DeleteLabel
//
// swagger:route DELETE /labels/{ID} labels deleteLabel
//
// # Delete a label
//
// default: genericError
//
//	200: labelDBResponse
func DeleteLabel(c *gin.Context) {
	db := orm.BackRepo.BackRepoLabel.GetDB()

	// Get model if exist
	var labelDB orm.LabelDB
	if err := db.First(&labelDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&labelDB)

	// get an instance (not staged) from DB instance, and call callback function
	labelDeleted := new(models.Label)
	labelDB.CopyBasicFieldsToLabel(labelDeleted)

	// get stage instance from DB instance, and call callback function
	labelStaged := (*orm.BackRepo.BackRepoLabel.Map_LabelDBID_LabelPtr)[labelDB.ID]
	if labelStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, labelStaged, labelDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
