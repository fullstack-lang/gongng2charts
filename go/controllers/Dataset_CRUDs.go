// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongng2charts/go/models"
	"github.com/fullstack-lang/gongng2charts/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Dataset__dummysDeclaration__ models.Dataset
var __Dataset_time__dummyDeclaration time.Duration

// An DatasetID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getDataset updateDataset deleteDataset
type DatasetID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// DatasetInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postDataset updateDataset
type DatasetInput struct {
	// The Dataset to submit or modify
	// in: body
	Dataset *orm.DatasetAPI
}

// GetDatasets
//
// swagger:route GET /datasets datasets getDatasets
//
// Get all datasets
//
// Responses:
//    default: genericError
//        200: datasetDBsResponse
func GetDatasets(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataset.GetDB()

	// source slice
	var datasetDBs []orm.DatasetDB
	query := db.Find(&datasetDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	datasetAPIs := make([]orm.DatasetAPI, 0)

	// for each dataset, update fields from the database nullable fields
	for idx := range datasetDBs {
		datasetDB := &datasetDBs[idx]
		_ = datasetDB
		var datasetAPI orm.DatasetAPI

		// insertion point for updating fields
		datasetAPI.ID = datasetDB.ID
		datasetDB.CopyBasicFieldsToDataset(&datasetAPI.Dataset)
		datasetAPI.DatasetPointersEnconding = datasetDB.DatasetPointersEnconding
		datasetAPIs = append(datasetAPIs, datasetAPI)
	}

	c.JSON(http.StatusOK, datasetAPIs)
}

// PostDataset
//
// swagger:route POST /datasets datasets postDataset
//
// Creates a dataset
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: datasetDBResponse
func PostDataset(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataset.GetDB()

	// Validate input
	var input orm.DatasetAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create dataset
	datasetDB := orm.DatasetDB{}
	datasetDB.DatasetPointersEnconding = input.DatasetPointersEnconding
	datasetDB.CopyBasicFieldsFromDataset(&input.Dataset)

	query := db.Create(&datasetDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, datasetDB)
}

// GetDataset
//
// swagger:route GET /datasets/{ID} datasets getDataset
//
// Gets the details for a dataset.
//
// Responses:
//    default: genericError
//        200: datasetDBResponse
func GetDataset(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataset.GetDB()

	// Get datasetDB in DB
	var datasetDB orm.DatasetDB
	if err := db.First(&datasetDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var datasetAPI orm.DatasetAPI
	datasetAPI.ID = datasetDB.ID
	datasetAPI.DatasetPointersEnconding = datasetDB.DatasetPointersEnconding
	datasetDB.CopyBasicFieldsToDataset(&datasetAPI.Dataset)

	c.JSON(http.StatusOK, datasetAPI)
}

// UpdateDataset
//
// swagger:route PATCH /datasets/{ID} datasets updateDataset
//
// Update a dataset
//
// Responses:
//    default: genericError
//        200: datasetDBResponse
func UpdateDataset(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataset.GetDB()

	// Get model if exist
	var datasetDB orm.DatasetDB

	// fetch the dataset
	query := db.First(&datasetDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.DatasetAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	datasetDB.CopyBasicFieldsFromDataset(&input.Dataset)
	datasetDB.DatasetPointersEnconding = input.DatasetPointersEnconding

	query = db.Model(&datasetDB).Updates(datasetDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the datasetDB
	c.JSON(http.StatusOK, datasetDB)
}

// DeleteDataset
//
// swagger:route DELETE /datasets/{ID} datasets deleteDataset
//
// Delete a dataset
//
// Responses:
//    default: genericError
func DeleteDataset(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataset.GetDB()

	// Get model if exist
	var datasetDB orm.DatasetDB
	if err := db.First(&datasetDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&datasetDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
