// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongng2charts/go/models"
	"github.com/fullstack-lang/gongng2charts/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __DataPoint__dummysDeclaration__ models.DataPoint
var __DataPoint_time__dummyDeclaration time.Duration

// An DataPointID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getDataPoint updateDataPoint deleteDataPoint
type DataPointID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// DataPointInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postDataPoint updateDataPoint
type DataPointInput struct {
	// The DataPoint to submit or modify
	// in: body
	DataPoint *orm.DataPointAPI
}

// GetDataPoints
//
// swagger:route GET /datapoints datapoints getDataPoints
//
// # Get all datapoints
//
// Responses:
// default: genericError
//
//	200: datapointDBResponse
func GetDataPoints(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataPoint.GetDB()

	// source slice
	var datapointDBs []orm.DataPointDB
	query := db.Find(&datapointDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	datapointAPIs := make([]orm.DataPointAPI, 0)

	// for each datapoint, update fields from the database nullable fields
	for idx := range datapointDBs {
		datapointDB := &datapointDBs[idx]
		_ = datapointDB
		var datapointAPI orm.DataPointAPI

		// insertion point for updating fields
		datapointAPI.ID = datapointDB.ID
		datapointDB.CopyBasicFieldsToDataPoint(&datapointAPI.DataPoint)
		datapointAPI.DataPointPointersEnconding = datapointDB.DataPointPointersEnconding
		datapointAPIs = append(datapointAPIs, datapointAPI)
	}

	c.JSON(http.StatusOK, datapointAPIs)
}

// PostDataPoint
//
// swagger:route POST /datapoints datapoints postDataPoint
//
// Creates a datapoint
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostDataPoint(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataPoint.GetDB()

	// Validate input
	var input orm.DataPointAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create datapoint
	datapointDB := orm.DataPointDB{}
	datapointDB.DataPointPointersEnconding = input.DataPointPointersEnconding
	datapointDB.CopyBasicFieldsFromDataPoint(&input.DataPoint)

	query := db.Create(&datapointDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoDataPoint.CheckoutPhaseOneInstance(&datapointDB)
	datapoint := (*orm.BackRepo.BackRepoDataPoint.Map_DataPointDBID_DataPointPtr)[datapointDB.ID]

	if datapoint != nil {
		models.AfterCreateFromFront(&models.Stage, datapoint)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, datapointDB)
}

// GetDataPoint
//
// swagger:route GET /datapoints/{ID} datapoints getDataPoint
//
// Gets the details for a datapoint.
//
// Responses:
// default: genericError
//
//	200: datapointDBResponse
func GetDataPoint(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataPoint.GetDB()

	// Get datapointDB in DB
	var datapointDB orm.DataPointDB
	if err := db.First(&datapointDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var datapointAPI orm.DataPointAPI
	datapointAPI.ID = datapointDB.ID
	datapointAPI.DataPointPointersEnconding = datapointDB.DataPointPointersEnconding
	datapointDB.CopyBasicFieldsToDataPoint(&datapointAPI.DataPoint)

	c.JSON(http.StatusOK, datapointAPI)
}

// UpdateDataPoint
//
// swagger:route PATCH /datapoints/{ID} datapoints updateDataPoint
//
// # Update a datapoint
//
// Responses:
// default: genericError
//
//	200: datapointDBResponse
func UpdateDataPoint(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataPoint.GetDB()

	// Get model if exist
	var datapointDB orm.DataPointDB

	// fetch the datapoint
	query := db.First(&datapointDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.DataPointAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	datapointDB.CopyBasicFieldsFromDataPoint(&input.DataPoint)
	datapointDB.DataPointPointersEnconding = input.DataPointPointersEnconding

	query = db.Model(&datapointDB).Updates(datapointDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	datapointNew := new(models.DataPoint)
	datapointDB.CopyBasicFieldsToDataPoint(datapointNew)

	// get stage instance from DB instance, and call callback function
	datapointOld := (*orm.BackRepo.BackRepoDataPoint.Map_DataPointDBID_DataPointPtr)[datapointDB.ID]
	if datapointOld != nil {
		models.AfterUpdateFromFront(&models.Stage, datapointOld, datapointNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the datapointDB
	c.JSON(http.StatusOK, datapointDB)
}

// DeleteDataPoint
//
// swagger:route DELETE /datapoints/{ID} datapoints deleteDataPoint
//
// # Delete a datapoint
//
// default: genericError
//
//	200: datapointDBResponse
func DeleteDataPoint(c *gin.Context) {
	db := orm.BackRepo.BackRepoDataPoint.GetDB()

	// Get model if exist
	var datapointDB orm.DataPointDB
	if err := db.First(&datapointDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&datapointDB)

	// get an instance (not staged) from DB instance, and call callback function
	datapointDeleted := new(models.DataPoint)
	datapointDB.CopyBasicFieldsToDataPoint(datapointDeleted)

	// get stage instance from DB instance, and call callback function
	datapointStaged := (*orm.BackRepo.BackRepoDataPoint.Map_DataPointDBID_DataPointPtr)[datapointDB.ID]
	if datapointStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, datapointStaged, datapointDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
